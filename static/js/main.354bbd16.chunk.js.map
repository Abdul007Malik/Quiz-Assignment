{"version":3,"sources":["components/Options/RadioButtons.js","components/Question/Options.js","utils/score.js","components/Question/index.js","constants.js","store/actions/stage.js","store/actions/report.js","store/actions/actionTypes.js","store/actions/questions.js","containers/Questions/index.js","components/User/UserForm.js","containers/User/index.js","store/actions/common.js","components/Report/index.js","containers/Report/index.js","hoc/PrivateRoute.js","App.js","serviceWorker.js","store/reducers/question.js","store/reducers/index.js","index.js","store/store.js"],"names":["props","item","id","options","onChange","console","trace","optionId","className","map","option","FormCheck","key","type","label","value","name","e","target","Options","this","disabled","styles","optionsDom","RadioButtons","getOptions","pointerEvents","opacity","style","React","Component","isCorrect","userAnswer","correctAnswer","isEqual","Question","state","answer","submitted","onSubmit","setState","setTimeout","questionId","question","isLast","correct_answer","correctAnswerInText","join","Container","isCorrectScore","Button","onClick","STAGES","completeStage","stage","dispatch","error","addScore","score","getStore","current","lastQuesIndex","questions","findIndex","q","length","QuestionContainer","parseQuestion","window","confirm","onFetchQuestions","questionIndex","ques","remains","completedPercent","loading","Spinner","animation","variant","ProgressBar","now","shuffle","connect","axios","get","then","res","fetchedQuestions","data","results","index","incorrect_answers","catch","err","log","UserForm","Form","preventDefault","placeholder","event","UserContainer","userData","registerUser","alert","post","response","user","Row","totalQuestions","totalAnswers","common","report","answers","Array","isArray","reduce","acc","qs","find","ans","calculateScore","path","exact","component","to","QuizApp","prev","currentStage","history","push","Questions","Report","withRouter","Boolean","location","hostname","match","initialState","action","Object","assign","combineReducers","finish","concat","store","preloadedState","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","axiosMock","MockAdapter","delayResponse","onPost","reply","onAny","passThrough","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.354bbd16.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormCheck } from 'react-bootstrap'\r\nexport default (props) => {\r\n    const {\r\n        id,\r\n        // label,\r\n        options,\r\n        // defaultValue,\r\n        onChange = () => console.trace(\"undefined onchange function\")\r\n    } = props.item;\r\n    let optionId = null;\r\n    return (\r\n        <div className=\"form-group\">\r\n            {options.map(option => {\r\n                optionId = typeof option === \"string\" ? option : option.id;\r\n                return <FormCheck key={optionId} type=\"radio\"\r\n                    label={typeof option === \"string\" ? option : option.label}\r\n                    value={optionId} name={id} onChange={(e) => onChange(e.target.value)} />\r\n            })}\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport RadioButtons from '../Options/RadioButtons';\r\n\r\nconst getOptions = (type, item) => {\r\n    switch (type) {\r\n        case 'radio':\r\n        case 'multiple':\r\n            return <RadioButtons item={item} />\r\n        default:\r\n            break;\r\n    }\r\n}\r\nexport default class Options extends React.Component {\r\n    render() {\r\n        const { id, options, onChange, disabled } = this.props, styles = {}\r\n        let optionsDom = getOptions(this.props.type, { id, onChange, options });\r\n        if (disabled) {\r\n            styles.pointerEvents = 'none'\r\n            styles.opacity = 0.4\r\n        }\r\n\r\n        return (\r\n            <div className=\"options\" style={styles}>\r\n                {optionsDom}\r\n            </div>\r\n        );\r\n    }\r\n}","import isEqual from 'lodash.isequal'\r\n\r\nexport const calculateScore = (questions, answers) => {\r\n    let answer = null,\r\n        score = Array.isArray(questions) && questions.reduce((acc, qs) => {\r\n            answer = answers.find(ans => ans.questionId === qs.id)\r\n            if (typeof answer?.answer !== \"undefined\" && isCorrect(answer?.answer, qs?.correct_answer)) {\r\n                return acc + 1;\r\n            } return acc;\r\n        }, 0)\r\n    return score;\r\n}\r\n\r\nexport const isCorrect = (userAnswer, correctAnswer) => isEqual(userAnswer, correctAnswer);\r\n","/**\r\n * @author Abdul Malik\r\n * @email abdul007malik@hotmail.com\r\n * @create date 2020-07-25 12:32\r\n * @modify date 2020-07-25 12:32\r\n * @desc [description]\r\n */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Options from './Options'\r\nimport { Container, Button } from 'react-bootstrap'\r\nimport './Question.css';\r\nimport { isCorrect as isCorrectScore } from '../../utils/score';\r\n\r\nclass Question extends React.Component {\r\n    static propTypes = {\r\n        question: PropTypes.string.isRequired,\r\n        options: PropTypes.array.isRequired,\r\n        id: PropTypes.number.isRequired,\r\n        type: PropTypes.string.isRequired,\r\n        isLast: PropTypes.bool\r\n    }\r\n\r\n    state = {\r\n        answer: null,\r\n        submitted: false\r\n    }\r\n    onSubmit = () => {\r\n        this.setState({ submitted: true })\r\n        setTimeout(() => this.props.onSubmit({ answer: this.state.answer, questionId: this.props.id }), 2000);\r\n    }\r\n\r\n    onChange = (answer) => {\r\n        this.setState({ answer })\r\n    }\r\n    render() {\r\n        const { id, question, options, type, isLast, correct_answer } = this.props,\r\n            { answer } = this.state,\r\n            correctAnswerInText = typeof correct_answer === \"string\" ? correct_answer : correct_answer.join(\", \")\r\n        return (\r\n            <Container className={'item'}>\r\n                <h3>{`Question ${id}) ${question}`} </h3>\r\n                {this.state.submitted &&\r\n                    (isCorrectScore(answer, correct_answer) ?\r\n                        <p className=\"text-success\">Correct Answer</p>\r\n                        : <><p className=\"text-danger\">Incorrect Answer</p>\r\n                            <p>Correct Answer is {correctAnswerInText}</p></>)}\r\n                <Options disabled={this.state.submitted} id={id} type={type} options={options} onChange={this.onChange} />\r\n                <Button disabled={this.state.submitted} onClick={this.onSubmit} >{isLast ? \"Submit Quiz\" : \"Next Question\"}</Button>\r\n            </Container>)\r\n    }\r\n}\r\n\r\nexport default Question","export const STAGES = { USER_REG: 0, QUESTION_STAGE: 1, REPORT_STAGE: 2, INVALID_STATE: 3 }\r\n","import { STAGES } from \"../../constants\";\r\n\r\nexport const completeStage = (stage) => (dispatch) => {\r\n    switch (stage) {\r\n        case STAGES.USER_REG:\r\n            dispatch({ type: 'STAGE_SET', stage: STAGES.QUESTION_STAGE })\r\n            break;\r\n        case STAGES.QUESTION_STAGE:\r\n            dispatch({ type: 'STAGE_FINISH', stage: STAGES.REPORT_STAGE })\r\n            break;\r\n        default:\r\n            dispatch({ type: 'STAGE_ERROR', error: \"Sorry the page you are trying to access doesnot exist\" })\r\n            break;\r\n    }\r\n}","import * as actionTypes from \"./actionTypes\"\r\nimport { nextQuestion } from \"./questions\"\r\nexport const addScore = (answer, score) => (dispatch) => {\r\n    if (answer) dispatch({ type: actionTypes.SCORE_ADD, answer, score });\r\n    dispatch(nextQuestion());\r\n}","export const STAGE_SET = 'STAGE_SET';\r\nexport const STAGE_FINISH = 'STAGE_FINISH';\r\nexport const STAGE_ERROR = 'STAGE_ERROR';\r\n\r\nexport const QUESTIONS_FETCH_START = 'QUESTIONS_FETCH_START';\r\nexport const QUESTIONS_FETCH_SUCCESS = 'QUESTIONS_FETCH_SUCCESS';\r\nexport const QUESTIONS_FETCH_FAIL = 'QUESTIONS_FETCH_FAIL';\r\nexport const QUESTIONS_POINTER_SET = 'QUESTIONS_POINTER_SET'\r\n\r\nexport const USER_REGISTER = 'USER_REGISTER'\r\nexport const USER_LOGOUT = 'USER_LOGOUT'\r\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL'\r\n\r\nexport const SCORE_ADD = 'SCORE_ADD'\r\nexport const SCORE_RESET = 'SCORE_RESET'","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\nimport { completeStage } from './stage';\r\nimport { STAGES } from '../../constants';\r\n\r\nexport const fetchQuestionsSuccess = (questions) => {\r\n    return {\r\n        type: actionTypes.QUESTIONS_FETCH_SUCCESS,\r\n        questions: questions\r\n    };\r\n};\r\n\r\nexport const nextQuestion = () => (dispatch, getStore) => {\r\n    const question = getStore().question, current = question.current,\r\n        lastQuesIndex = question.questions.findIndex(q => q.id === current),\r\n        questionId = question.questions[lastQuesIndex + 1]?.id\r\n    if (lastQuesIndex !== -1) {\r\n        // dispatch(completeStage(STAGES.QUESTION_STAGE));\r\n        //if lastQuesIndex is last in the questions then complete question state\r\n        if (lastQuesIndex === question.questions.length - 1) {\r\n            dispatch({ type: actionTypes.QUESTIONS_POINTER_SET, current: null })\r\n            dispatch(completeStage(STAGES.QUESTION_STAGE));\r\n        } else\r\n            dispatch({ type: actionTypes.QUESTIONS_POINTER_SET, current: questionId })\r\n    } else console.trace(\"Invalid state:\", lastQuesIndex, current, question.questions);\r\n}\r\n\r\nexport const fetchQuestions = () => {\r\n    return dispatch => {\r\n        dispatch({ type: actionTypes.QUESTIONS_FETCH_START });\r\n        axios.get('https://opentdb.com/api.php?amount=5&category=15&difficulty=easy&type=multiple')\r\n            .then(res => {\r\n                const fetchedQuestions = res.data.results.map((question, index) => ({\r\n                    ...question,\r\n                    options: [...question.incorrect_answers, question.correct_answer],\r\n                    id: index + 1\r\n                }))\r\n                dispatch(fetchQuestionsSuccess(fetchedQuestions));\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch({\r\n                    type: actionTypes.QUESTIONS_FETCH_FAIL,\r\n                    error: \"Failed to fetch questions\"\r\n                });\r\n            });\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Question from '../../components/Question';\r\nimport { fetchQuestions } from '../../store/actions/questions';\r\nimport { addScore } from '../../store/actions/report';\r\n// import question from '../../store/reducers/question';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\nimport PropTypes from 'prop-types'\r\nimport { Container, ProgressBar, Spinner } from 'react-bootstrap';\r\nimport shuffle from 'lodash.shuffle'\r\nclass QuestionContainer extends Component {\r\n\r\n    static propTypes = {\r\n        addScore: PropTypes.func.isRequired,\r\n        current: PropTypes.number\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchQuestions();\r\n    }\r\n\r\n    // timerStart = () => {\r\n    //     set\r\n    // }\r\n\r\n    // componentWillUnmount(){\r\n\r\n    // }\r\n    parseQuestion = (question) => {\r\n        return question && { ...question }\r\n    }\r\n    onSubmit = question => answer => {\r\n        if (answer?.answer)\r\n            this.props.addScore(answer, 1);\r\n        else if (!window.confirm(\"Do you want to skip this question\"))\r\n            return;\r\n        else\r\n            this.props.addScore(null, 0);\r\n    }\r\n    render() {\r\n        const questions = this.props.questions, questionIndex = questions.findIndex(ques => ques.id === this.props.current),\r\n            question = this.parseQuestion(this.props.questions[questionIndex]),\r\n            remains = questions.length - questionIndex, completedPercent = (questionIndex) * 100 / questions.length\r\n\r\n        return (\r\n            <Container className={'questions grid col-sm-8 shadow p-3 mb-5 bg-white rounded'}>\r\n                {this.props.loading ? <Spinner animation=\"border\" variant=\"warning\" /> :\r\n                    <>\r\n                        <ProgressBar variant=\"success\" now={completedPercent} />\r\n                        {question ?\r\n                            <Question key={question.id} isLast={remains === 1} {...question} options={shuffle(question.options)}  onSubmit={this.onSubmit(question)} />\r\n                            : \"No question available\"}\r\n                    </>}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { question = {} } = state\r\n    return {\r\n        questions: question.questions,\r\n        loading: question.loading,\r\n        current: question.current\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchQuestions: () => dispatch(fetchQuestions()),\r\n        addScore: (answer, score) => dispatch(addScore(answer, score))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionContainer);","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Container, Form } from 'react-bootstrap'\r\nimport './User.css'\r\n\r\nclass UserForm extends React.Component {\r\n\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired\r\n    }\r\n    \r\n    state = { name: '' }\r\n\r\n    render() {\r\n        const { name } = this.state\r\n        return (\r\n            <Container className={'user-register'}>\r\n                <div className=\"auth-wrapper\">\r\n                    <div className=\"shadow p-3 mb-5 bg-white rounded auth-inner\">\r\n                        <Form className=\"\" onSubmit={e => { e.preventDefault();this.props.onSubmit({ name }) }} >\r\n                            <h3>Register</h3>\r\n                            <div className={\"user-form\"}>\r\n                                <div className=\"form-group\">\r\n                                    <input name=\"user\" value={name} className=\"form-control\" placeholder=\"Your Name\" onChange={(event) => this.setState({ name: event.target.value })} />\r\n                                </div>\r\n                                <Button type=\"submit\" className=\"btn btn-primary btn-block\" >Register</Button>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserForm;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { registerUser } from \"../../store/actions/common\";\r\nimport UserForm from \"../../components/User/UserForm\";\r\nclass UserContainer extends Component {\r\n\r\n    onSubmit = (userData) => {\r\n        if (!userData || !userData.name) {\r\n            alert(\"Name is required\");\r\n            return;\r\n        }\r\n        // console.log(typeof this.props.registerUser, this.props.registerUser,userData)\r\n        this.props.registerUser(userData);\r\n    }\r\n\r\n    render() {\r\n        return <UserForm onSubmit={this.onSubmit} />\r\n    }\r\n}\r\n\r\nconst mapStoD = dispatch => {\r\n    return { registerUser: (data) => dispatch(registerUser(data)) }\r\n}\r\nexport default connect(null, mapStoD)(UserContainer);","import axios from \"axios\";\r\nimport { completeStage } from './stage'\r\nimport * as actionTypes from './actionTypes'\r\nimport { STAGES } from \"../../constants\";\r\n\r\nexport const registerUser = (userData) => (dispatch) => {\r\n    axios.post('http://localhost:8000/register', userData)\r\n        .then(response => {\r\n            dispatch({ type: actionTypes.USER_REGISTER, user: { ...userData } })\r\n            dispatch(completeStage(STAGES.USER_REG));\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: actionTypes.USER_REGISTER_FAIL, error: 'Failed to register. Please try again...' });\r\n        });\r\n}","import React from 'react'\r\nimport { Row } from 'react-bootstrap'\r\nimport './Report.css'\r\nexport default (props) => {\r\n    return <Row className=\"shadow p-3 mb-5 bg-white rounded\">\r\n        <label>\r\n            Congratulation {props.user?.name}, You have scored {props.score} out of {props.totalQuestions} (Attempted: {props.totalAnswers})\r\n        </label>\r\n    </Row>\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport { calculateScore } from '../../utils/score'\r\nimport { Container } from 'react-bootstrap';\r\nimport Report from '../../components/Report/index';\r\n\r\nconst ReportContainer = props => {\r\n    const { answers, questions, user } = props,\r\n        totalQuestions = questions?.length || 0, totalAnswers = answers?.length || 0;\r\n    let score = calculateScore(questions, answers)\r\n    return (\r\n        <Container className=\"report\">\r\n            <Report score={score} user={user} totalQuestions={totalQuestions} totalAnswers={totalAnswers} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nReportContainer.propTypes = {\r\n    answers: PropTypes.array.isRequired,\r\n    score: PropTypes.number.isRequired\r\n}\r\nconst mapStoP = (state) => {\r\n    const { common: { current }, report: { answers, score }, question: { questions } } = state\r\n    return { answers, score, questions, user: current }\r\n}\r\nexport default connect(mapStoP)(ReportContainer);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst PrivateRoute = (props) => {\r\n    return props.user != null ?\r\n        (<Route path={props.path} exact={props.exact} component={props.component} />) :\r\n        (<Redirect to=\"/\" />);\r\n};\r\nexport default connect((state) => ({ user: state.common?.current }))(PrivateRoute);","/**\n * @author Abdul Malik\n * @email abdul007malik@hotmail.com\n * @create date 2020-07-25 11:41\n * @modify date 2020-07-25 11:41\n * @desc [description]\n */\nimport React from 'react';\nimport { Route, withRouter } from \"react-router\";\n// import logo from './logo.svg';\nimport './App.css';\n// import { STAGES } from './constants'\nimport { connect } from 'react-redux'\nimport Questions from './containers/Questions/index'\nimport UserForm from './containers/User/index'\nimport { STAGES } from './constants';\nimport Report from './containers/Report';\nimport PrivateRoute from './hoc/PrivateRoute';\n\nclass QuizApp extends React.Component {\n\n  componentDidMount() {\n  }\n\n  componentDidUpdate(prev) {\n    if (prev.currentStage !== this.props.currentStage) {\n      if (this.props.currentStage === STAGES.USER_REG)\n        this.props.history.push('/');\n      if (this.props.currentStage === STAGES.QUESTION_STAGE)\n        this.props.history.push('/question');\n      if (this.props.currentStage === STAGES.REPORT_STAGE)\n        this.props.history.push('/report');\n      if (this.props.currentStage === STAGES.INVALID_STATE)\n        this.props.history.push('/error');\n    }\n  }\n\n  getPageTile(stage) {\n    switch (stage) {\n      case 1:\n        return \"Questions\";\n      case 2:\n        return \"Report\";\n      default:\n        return \"Register\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        {/* <h1>{this.getPageTile(this.props.currentStage)}</h1> */}\n        <Route exact path={`/`} component={UserForm} />\n        <PrivateRoute path={`/question`} component={Questions} />\n        <PrivateRoute path={`/report`} component={Report} />\n      </div>\n    )\n  };\n}\nconst mapStoP = (state) => {\n  const { stage } = state\n  return { currentStage: stage.current }\n}\n\nexport default connect(mapStoP)(withRouter(QuizApp));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = { questions: [], loading: false, current: 1 };\r\n\r\nconst question = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.QUESTIONS_FETCH_START:\r\n            return Object.assign({}, state, { loading: true });\r\n        case actionTypes.QUESTIONS_FETCH_SUCCESS:\r\n            return Object.assign({}, state, { questions: action.questions, loading: false });\r\n        case actionTypes.QUESTIONS_FETCH_FAIL:\r\n            return Object.assign({}, state, { loading: false, error: action.error });\r\n        case actionTypes.QUESTIONS_POINTER_SET:\r\n            return Object.assign({}, state, { current: action.current })\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default question;","import { combineReducers } from 'redux';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport { STAGES } from \"../../constants.js\";\r\nimport question from \"./question\";\r\n\r\nconst stage = (state = { current: STAGES.USER_REG, finish: false }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.STAGE_SET:\r\n            return Object.assign({}, state, { current: action.stage });\r\n        case actionTypes.STAGE_FINISH:\r\n            return Object.assign({}, state, { current: STAGES.REPORT_STAGE, finish: true });\r\n        case actionTypes.STAGE_ERROR:\r\n            return Object.assign({}, state, { current: STAGES.INVALID_STATE, error: action.error });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst common = (state = { current: null }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.USER_REGISTER:\r\n            return Object.assign({}, state, { current: action.user });\r\n        case actionTypes.USER_LOGOUT:\r\n            return Object.assign({}, state, { current: null });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst report = (state = { score: null, answers: [] }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SCORE_ADD:\r\n            return Object.assign({}, state, {\r\n                score: state.score + action.score,\r\n                answers: state.answers.concat(action.answer)\r\n            });\r\n        case actionTypes.SCORE_RESET:\r\n            return Object.assign({}, state, { score: null, answers: [] });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    stage, question, common, report\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/store'\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst persistState = {};\nconst store = configureStore(persistState)\n\n// Mock api calls\nconst axiosMock = new MockAdapter(axios, { delayResponse: 500 });\n\n// const questionsData = require('./questions.json');\n// console.log(questionsData)\n\n\n// axiosMock.onPut('http://localhost:8000/questions').reply(204)\n\n// axiosMock.onGet('http://localhost:8000/questions').reply(200, questionsData);\n\naxiosMock.onPost('http://localhost:8000/register').reply(200, {\n  id: 1,\n  name: ''\n})\naxiosMock.onAny().passThrough();\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\n// import { persistState } from 'redux-devtools'\r\n// import { createStore, applyMiddleware } from 'redux'\r\n\r\nimport rootReducer from \"./reducers\"\r\n// export default createStore(\r\n//     reducers, {}, applyMiddleware(thunk)\r\n// );\r\n\r\nexport default function configureAppStore(preloadedState = {}) {\r\n    const store = configureStore({\r\n        reducer: rootReducer,\r\n        middleware: getDefaultMiddleware(),\r\n        preloadedState\r\n    })\r\n    // store.subscribe(throttle(() => {\r\n    //   saveState(store.getState());\r\n    // }, 1000));\r\n    // if (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    //     module.hot.accept('../reducers', () => store.replaceReducer(rootReducer))\r\n    // }\r\n    return store\r\n}"],"sourceRoot":""}