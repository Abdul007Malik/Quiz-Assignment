{"version":3,"sources":["components/Options/RadioButtons.js","components/Options/Text.js","components/Question/Options.js","utils/score.js","components/UI/video.js","components/Question/index.js","constants.js","store/actions/stage.js","store/actions/report.js","store/actions/actionTypes.js","store/actions/questions.js","containers/Questions/index.js","components/User/UserForm.js","containers/User/index.js","store/actions/common.js","components/Report/index.js","containers/Report/index.js","hoc/PrivateRoute.js","App.js","serviceWorker.js","store/reducers/question.js","store/reducers/index.js","index.js","store/store.js"],"names":["props","item","id","options","onChange","console","trace","optionId","className","map","option","FormCheck","key","type","label","value","name","e","target","FormControl","placeholder","toLowerCase","Options","this","disabled","styles","optionsDom","RadioButtons","Text","getOptions","pointerEvents","opacity","style","React","Component","isCorrect","userAnswer","correctAnswer","isEqual","VideoPlayer","player","videojs","videoNode","log","responsive","dispose","Container","ref","node","width","height","Question","state","answer","submitted","onSubmit","window","confirm","setState","setTimeout","questionId","getExtra","question","src","imagePath","alt","autoplay","controls","sources","videoPath","isLast","correct_answer","questionType","rest","correctAnswerInText","join","isCorrectScore","Button","onClick","STAGES","completeStage","stage","dispatch","error","addScore","score","getStore","current","lastQuesIndex","questions","findIndex","q","length","QuestionContainer","countdown","moment","duration","interval","timer","asSeconds","prevState","setInterval","onFetchQuestions","clearInterval","questionIndex","ques","remains","completedPercent","timerClasses","push","hours","minutes","seconds","loading","Spinner","animation","variant","ProgressBar","now","connect","axios","get","then","res","fetchedQuestions","data","results","index","shuffle","catch","err","UserForm","Form","preventDefault","event","UserContainer","userData","registerUser","alert","post","response","user","Row","totalQuestions","totalAnswers","common","report","answers","Array","isArray","reduce","acc","qs","find","ans","calculateScore","path","exact","component","to","QuizApp","prev","currentStage","history","Questions","Report","withRouter","Boolean","location","hostname","match","initialState","action","Object","assign","combineReducers","finish","concat","store","preloadedState","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","axiosMock","MockAdapter","delayResponse","questionsData","require","onGet","reply","onPost","onAny","passThrough","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.131662a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormCheck } from 'react-bootstrap'\r\nexport default (props) => {\r\n    const {\r\n        id,\r\n        // label,\r\n        options,\r\n        // defaultValue,\r\n        onChange = () => console.trace(\"undefined onchange function\")\r\n    } = props.item;\r\n    let optionId = null;\r\n    return (\r\n        <div className=\"form-group\">\r\n            {options.map(option => {\r\n                optionId = typeof option === \"string\" ? option : option.id;\r\n                return <FormCheck key={optionId} type=\"radio\"\r\n                    label={typeof option === \"string\" ? option : option.label}\r\n                    value={optionId} name={id} onChange={(e) => onChange(e.target.value)} />\r\n            })}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { FormControl } from 'react-bootstrap'\r\nexport default (props) => {\r\n    const {\r\n        id,\r\n        // defaultValue,\r\n        onChange = () => console.trace(\"undefined onchange function\")\r\n    } = props.item;\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <FormControl placeholder=\"Enter Your answer\" type=\"text\"\r\n                name={id} onChange={(e) => onChange(e.target.value ? e.target.value.toLowerCase() : '')} />\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport { RadioButtons, Text } from '../Options';\r\n\r\nconst getOptions = (type, item) => {\r\n    switch (type) {\r\n        case 'radio':\r\n        case 'multiple':\r\n            return <RadioButtons item={item} />\r\n        case 'fill_in_blank':\r\n            return <Text item={item} />\r\n        default:\r\n            break;\r\n    }\r\n}\r\nexport default class Options extends React.Component {\r\n    render() {\r\n        const { id, options, onChange, disabled } = this.props, styles = {}\r\n        let optionsDom = getOptions(this.props.type, { id, onChange, options });\r\n        if (disabled) {\r\n            styles.pointerEvents = 'none'\r\n            styles.opacity = 0.4\r\n        }\r\n\r\n        return (\r\n            <div className=\"options\" style={styles}>\r\n                {optionsDom}\r\n            </div>\r\n        );\r\n    }\r\n}","import isEqual from 'lodash.isequal'\r\n\r\nexport const calculateScore = (questions, answers) => {\r\n    let answer = null,\r\n        score = Array.isArray(questions) && questions.reduce((acc, qs) => {\r\n            answer = answers.find(ans => ans.questionId === qs.id)\r\n            if (typeof answer?.answer !== \"undefined\" && isCorrect(answer?.answer, qs?.correct_answer)) {\r\n                return acc + 1;\r\n            } return acc;\r\n        }, 0)\r\n    return score;\r\n}\r\n\r\nexport const isCorrect = (userAnswer, correctAnswer) => isEqual(userAnswer, correctAnswer);\r\n","/**\r\n * @author Abdul Malik\r\n * @email abdul007malik@hotmail.com\r\n * @create date 2020-07-26 20:45\r\n * @modify date 2020-07-26 20:45\r\n * @desc Video Player\r\n */\r\nimport React from 'react'\r\nimport videojs from 'video.js'\r\nimport { Container } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class VideoPlayer extends React.Component {\r\n    static propTypes = {\r\n        sourcePath: PropTypes.string.isRequired\r\n    }\r\n    componentDidMount() {\r\n        // instantiate Video.js\r\n        this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\r\n            console.log('onPlayerReady', this)\r\n        });\r\n        this.player.responsive(true);\r\n    }\r\n\r\n    // destroy player on unmount\r\n    componentWillUnmount() {\r\n        if (this.player) {\r\n            this.player.dispose()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Container className=\"video-player\">\r\n            <video ref={node => this.videoNode = node}\r\n                className=\"video-js vjs-default-skin\" width=\"640px\" height=\"267px\"\r\n            />\r\n        </Container>\r\n    }\r\n}","/**\r\n * @author Abdul Malik\r\n * @email abdul007malik@hotmail.com\r\n * @create date 2020-07-25 12:32\r\n * @modify date 2020-07-25 12:32\r\n * @desc [description]\r\n */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Options from './Options'\r\nimport { Container, Button } from 'react-bootstrap'\r\nimport './Question.css';\r\nimport { isCorrect as isCorrectScore } from '../../utils/score';\r\nimport VideoPlayer from '../UI/video';\r\n\r\nclass Question extends React.Component {\r\n    static propTypes = {\r\n        question: PropTypes.string.isRequired,\r\n        options: PropTypes.array.isRequired,\r\n        id: PropTypes.number.isRequired,\r\n        type: PropTypes.string.isRequired,\r\n        isLast: PropTypes.bool\r\n    }\r\n\r\n    state = {\r\n        answer: null,\r\n        submitted: false\r\n    }\r\n    onSubmit = () => {\r\n        if (!this.state.answer && !window.confirm(\"Do you want to skip this question\"))\r\n            return;\r\n        this.setState({ submitted: true })\r\n        setTimeout(() => this.props.onSubmit({ answer: this.state.answer, questionId: this.props.id }), 2000);\r\n    }\r\n\r\n    onChange = (answer) => {\r\n        this.setState({ answer })\r\n    }\r\n\r\n    getExtra = (type, question) => {\r\n        switch (type) {\r\n            case \"image\":\r\n                return <img height=\"100px\" width=\"100px\" src={question.imagePath} alt=\"Not available\" />\r\n            case \"video\":\r\n                return <VideoPlayer\r\n                    autoplay={true} controls={true}\r\n                    sources={{ src: question.videoPath, type: 'video/mp4' }} />\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    render() {\r\n        const { id, question, options, type, isLast, correct_answer, questionType, ...rest } = this.props,\r\n            { answer } = this.state,\r\n            correctAnswerInText = typeof correct_answer === \"string\" ? correct_answer : correct_answer.join(\", \")\r\n        return (\r\n            <Container className={'item'}>\r\n                <h3>{`Question ${id}) ${question}`} </h3>\r\n                {this.state.submitted && answer != null &&\r\n                    (isCorrectScore(answer, correct_answer) ?\r\n                        <p className=\"text-success\">Correct Answer</p>\r\n                        : <><p className=\"text-danger\">Incorrect Answer</p>\r\n                            <p>Correct Answer is {correctAnswerInText}</p></>)}\r\n                {this.getExtra(questionType, rest)}\r\n                <Options disabled={this.state.submitted} id={id} type={type} options={options} onChange={this.onChange} />\r\n                <Button disabled={this.state.submitted} onClick={this.onSubmit} >{isLast ? \"Submit Quiz\" : \"Next Question\"}</Button>\r\n            </Container>)\r\n    }\r\n}\r\n\r\nexport default Question","export const STAGES = { USER_REG: 0, QUESTION_STAGE: 1, REPORT_STAGE: 2, INVALID_STATE: 3 }\r\n","import { STAGES } from \"../../constants\";\r\n\r\nexport const completeStage = (stage) => (dispatch) => {\r\n    switch (stage) {\r\n        case STAGES.USER_REG:\r\n            dispatch({ type: 'STAGE_SET', stage: STAGES.QUESTION_STAGE })\r\n            break;\r\n        case STAGES.QUESTION_STAGE:\r\n            dispatch({ type: 'STAGE_FINISH', stage: STAGES.REPORT_STAGE })\r\n            break;\r\n        default:\r\n            dispatch({ type: 'STAGE_ERROR', error: \"Sorry the page you are trying to access doesnot exist\" })\r\n            break;\r\n    }\r\n}","import * as actionTypes from \"./actionTypes\"\r\nimport { nextQuestion } from \"./questions\"\r\nexport const addScore = (answer, score) => (dispatch) => {\r\n    if (answer) dispatch({ type: actionTypes.SCORE_ADD, answer, score });\r\n    dispatch(nextQuestion());\r\n}","export const STAGE_SET = 'STAGE_SET';\r\nexport const STAGE_FINISH = 'STAGE_FINISH';\r\nexport const STAGE_ERROR = 'STAGE_ERROR';\r\n\r\nexport const QUESTIONS_FETCH_START = 'QUESTIONS_FETCH_START';\r\nexport const QUESTIONS_FETCH_SUCCESS = 'QUESTIONS_FETCH_SUCCESS';\r\nexport const QUESTIONS_FETCH_FAIL = 'QUESTIONS_FETCH_FAIL';\r\nexport const QUESTIONS_POINTER_SET = 'QUESTIONS_POINTER_SET'\r\n\r\nexport const USER_REGISTER = 'USER_REGISTER'\r\nexport const USER_LOGOUT = 'USER_LOGOUT'\r\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL'\r\n\r\nexport const SCORE_ADD = 'SCORE_ADD'\r\nexport const SCORE_RESET = 'SCORE_RESET'","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\nimport { completeStage } from './stage';\r\nimport { STAGES } from '../../constants';\r\nimport shuffle from 'lodash.shuffle';\r\n\r\nexport const fetchQuestionsSuccess = (questions) => {\r\n    return {\r\n        type: actionTypes.QUESTIONS_FETCH_SUCCESS,\r\n        questions: questions\r\n    };\r\n};\r\n\r\nexport const nextQuestion = () => (dispatch, getStore) => {\r\n    const question = getStore().question, current = question.current,\r\n        lastQuesIndex = question.questions.findIndex(q => q.id === current),\r\n        questionId = question.questions[lastQuesIndex + 1]?.id\r\n    if (lastQuesIndex !== -1) {\r\n        // dispatch(completeStage(STAGES.QUESTION_STAGE));\r\n        //if lastQuesIndex is last in the questions then complete question state\r\n        if (lastQuesIndex === question.questions.length - 1) {\r\n            dispatch({ type: actionTypes.QUESTIONS_POINTER_SET, current: null })\r\n            dispatch(completeStage(STAGES.QUESTION_STAGE));\r\n        } else\r\n            dispatch({ type: actionTypes.QUESTIONS_POINTER_SET, current: questionId })\r\n    } else console.trace(\"Invalid state:\", lastQuesIndex, current, question.questions);\r\n}\r\n\r\nexport const fetchQuestions = () => {\r\n    return dispatch => {\r\n        dispatch({ type: actionTypes.QUESTIONS_FETCH_START });\r\n        axios.get('http://localhost:8000/questions')\r\n            .then(res => {\r\n                const fetchedQuestions = res.data.results.map((question, index) => ({\r\n                    ...question,\r\n                    options: shuffle(question?.options),\r\n                    id: index + 1\r\n                }))\r\n                dispatch(fetchQuestionsSuccess(fetchedQuestions));\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: actionTypes.QUESTIONS_FETCH_FAIL,\r\n                    error: \"Failed to fetch questions\"\r\n                });\r\n            });\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment'\r\n\r\nimport Question from '../../components/Question';\r\nimport { fetchQuestions } from '../../store/actions/questions';\r\nimport { addScore } from '../../store/actions/report';\r\n// import question from '../../store/reducers/question';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\nimport PropTypes from 'prop-types'\r\nimport { Container, ProgressBar, Spinner } from 'react-bootstrap';\r\nimport { completeStage } from '../../store/actions/stage';\r\nimport { STAGES } from '../../constants';\r\nclass QuestionContainer extends Component {\r\n\r\n    static propTypes = {\r\n        addScore: PropTypes.func.isRequired,\r\n        current: PropTypes.number\r\n    }\r\n    // today = moment();\r\n    state = { countdown: moment.duration(this.props.duration, 'seconds') }\r\n    interval = null\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => {\r\n            this.timer();\r\n        }, 1000);\r\n\r\n        this.props.onFetchQuestions();\r\n    }\r\n\r\n    timer = () => {\r\n        let countdown = this.state.countdown\r\n        if (countdown.asSeconds() <= 0) {\r\n            this.props.completeStage()\r\n            return;\r\n        }\r\n        this.setState(prevState => ({\r\n            countdown: moment.duration(prevState.countdown.asSeconds() - 1, 'seconds')\r\n        }))\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    onSubmit = question => answer => {\r\n        if (answer?.answer)\r\n            this.props.addScore(answer, 1);\r\n        else\r\n            this.props.addScore(null, 0);\r\n    }\r\n    render() {\r\n        const questions = this.props.questions, questionIndex = questions.findIndex(ques => ques.id === this.props.current), question = this.props.questions[questionIndex],\r\n            remains = questions.length - questionIndex, completedPercent = (questionIndex) * 100 / questions.length, countdown = this.state.countdown;\r\n\r\n        const timerClasses = ['timer']\r\n        if (countdown.asSeconds() < 10)\r\n            timerClasses.push('blink text-danger')\r\n\r\n        return (\r\n            <Container className={'questions grid col-sm-8 shadow p-3 mb-5 bg-white rounded'}>\r\n                <div className={timerClasses.join(\" \")}>\r\n                    Time :: {countdown.hours()}:{countdown.minutes()}:{countdown.seconds()}\r\n                </div>\r\n                {this.props.loading ? <Spinner animation=\"border\" variant=\"warning\" /> :\r\n                    <>\r\n                        <ProgressBar variant=\"success\" now={completedPercent} />\r\n                        {question ?\r\n                            <Question key={question.id} isLast={remains === 1} {...question} options={question.options} onSubmit={this.onSubmit(question)} />\r\n                            : \"No question available\"}\r\n                    </>}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { question = {} } = state\r\n    return {\r\n        questions: question.questions,\r\n        loading: question.loading,\r\n        current: question.current,\r\n        duration: question.duration\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchQuestions: () => dispatch(fetchQuestions()),\r\n        addScore: (answer, score) => dispatch(addScore(answer, score)),\r\n        completeStage: () => dispatch(completeStage(STAGES.QUESTION_STAGE))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionContainer);","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Container, Form } from 'react-bootstrap'\r\nimport './User.css'\r\n\r\nclass UserForm extends React.Component {\r\n\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired\r\n    }\r\n    \r\n    state = { name: '' }\r\n\r\n    render() {\r\n        const { name } = this.state\r\n        return (\r\n            <Container className={'user-register'}>\r\n                <div className=\"auth-wrapper\">\r\n                    <div className=\"shadow p-3 mb-5 bg-white rounded auth-inner\">\r\n                        <Form className=\"\" onSubmit={e => { e.preventDefault();this.props.onSubmit({ name }) }} >\r\n                            <h3>Register</h3>\r\n                            <div className={\"user-form\"}>\r\n                                <div className=\"form-group\">\r\n                                    <input name=\"user\" value={name} className=\"form-control\" placeholder=\"Your Name\" onChange={(event) => this.setState({ name: event.target.value })} />\r\n                                </div>\r\n                                <Button type=\"submit\" className=\"btn btn-primary btn-block\" >Register</Button>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserForm;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { registerUser } from \"../../store/actions/common\";\r\nimport UserForm from \"../../components/User/UserForm\";\r\nclass UserContainer extends Component {\r\n\r\n    onSubmit = (userData) => {\r\n        if (!userData || !userData.name) {\r\n            alert(\"Name is required\");\r\n            return;\r\n        }\r\n        // console.log(typeof this.props.registerUser, this.props.registerUser,userData)\r\n        this.props.registerUser(userData);\r\n    }\r\n\r\n    render() {\r\n        return <UserForm onSubmit={this.onSubmit} />\r\n    }\r\n}\r\n\r\nconst mapStoD = dispatch => {\r\n    return { registerUser: (data) => dispatch(registerUser(data)) }\r\n}\r\nexport default connect(null, mapStoD)(UserContainer);","import axios from \"axios\";\r\nimport { completeStage } from './stage'\r\nimport * as actionTypes from './actionTypes'\r\nimport { STAGES } from \"../../constants\";\r\n\r\nexport const registerUser = (userData) => (dispatch) => {\r\n    axios.post('http://localhost:8000/register', userData)\r\n        .then(response => {\r\n            dispatch({ type: actionTypes.USER_REGISTER, user: { ...userData } })\r\n            dispatch(completeStage(STAGES.USER_REG));\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: actionTypes.USER_REGISTER_FAIL, error: 'Failed to register. Please try again...' });\r\n        });\r\n}","import React from 'react'\r\nimport { Row } from 'react-bootstrap'\r\nimport './Report.css'\r\nexport default (props) => {\r\n    return <Row className=\"shadow p-3 mb-5 bg-white rounded\">\r\n        <label>\r\n            Congratulation {props.user?.name}, You have scored {props.score} out of {props.totalQuestions} (Attempted: {props.totalAnswers})\r\n        </label>\r\n    </Row>\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport { calculateScore } from '../../utils/score'\r\nimport { Container } from 'react-bootstrap';\r\nimport Report from '../../components/Report/index';\r\n\r\nconst ReportContainer = props => {\r\n    const { answers, questions, user } = props,\r\n        totalQuestions = questions?.length || 0, totalAnswers = answers?.length || 0;\r\n    let score = calculateScore(questions, answers)\r\n    return (\r\n        <Container className=\"report\">\r\n            <Report score={score} user={user} totalQuestions={totalQuestions} totalAnswers={totalAnswers} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nReportContainer.propTypes = {\r\n    answers: PropTypes.array.isRequired,\r\n    score: PropTypes.number.isRequired\r\n}\r\nconst mapStoP = (state) => {\r\n    const { common: { current }, report: { answers, score }, question: { questions } } = state\r\n    return { answers, score, questions, user: current }\r\n}\r\nexport default connect(mapStoP)(ReportContainer);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst PrivateRoute = (props) => {\r\n    return props.user != null ?\r\n        (<Route path={props.path} exact={props.exact} component={props.component} />) :\r\n        (<Redirect to=\"/\" />);\r\n};\r\nexport default connect((state) => ({ user: state.common?.current }))(PrivateRoute);","/**\n * @author Abdul Malik\n * @email abdul007malik@hotmail.com\n * @create date 2020-07-25 11:41\n * @modify date 2020-07-25 11:41\n * @desc [description]\n */\nimport React from 'react';\nimport { Route, withRouter } from \"react-router\";\n// import logo from './logo.svg';\nimport './App.css';\n// import { STAGES } from './constants'\nimport { connect } from 'react-redux'\nimport Questions from './containers/Questions/index'\nimport UserForm from './containers/User/index'\nimport { STAGES } from './constants';\nimport Report from './containers/Report';\nimport PrivateRoute from './hoc/PrivateRoute';\n\nclass QuizApp extends React.Component {\n\n  componentDidUpdate(prev) {\n    if (prev.currentStage !== this.props.currentStage) {\n      if (this.props.currentStage === STAGES.USER_REG)\n        this.props.history.push('/');\n      if (this.props.currentStage === STAGES.QUESTION_STAGE)\n        this.props.history.push('/question');\n      if (this.props.currentStage === STAGES.REPORT_STAGE)\n        this.props.history.push('/report');\n      if (this.props.currentStage === STAGES.INVALID_STATE)\n        this.props.history.push('/error');\n    }\n  }\n  \n\n  getPageTile(stage) {\n    switch (stage) {\n      case 1:\n        return \"Questions\";\n      case 2:\n        return \"Report\";\n      default:\n        return \"Register\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Route exact path={`/`} component={UserForm} />\n        <PrivateRoute path={`/question`} component={Questions} />\n        <PrivateRoute path={`/report`} component={Report} />\n      </div>\n    )\n  };\n}\nconst mapStoP = (state) => {\n  const { stage } = state\n  return { currentStage: stage.current }\n}\n\nexport default connect(mapStoP)(withRouter(QuizApp));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = { questions: [], loading: false, duration: 60, current: 1 };\r\n\r\nconst question = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.QUESTIONS_FETCH_START:\r\n            return Object.assign({}, state, { loading: true });\r\n        case actionTypes.QUESTIONS_FETCH_SUCCESS:\r\n            return Object.assign({}, state, { questions: action.questions, loading: false });\r\n        case actionTypes.QUESTIONS_FETCH_FAIL:\r\n            return Object.assign({}, state, { loading: false, error: action.error });\r\n        case actionTypes.QUESTIONS_POINTER_SET:\r\n            return Object.assign({}, state, { current: action.current })\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default question;","import { combineReducers } from 'redux';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport { STAGES } from \"../../constants.js\";\r\nimport question from \"./question\";\r\n\r\nconst stage = (state = { current: STAGES.USER_REG, finish: false }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.STAGE_SET:\r\n            return Object.assign({}, state, { current: action.stage });\r\n        case actionTypes.STAGE_FINISH:\r\n            return Object.assign({}, state, { current: STAGES.REPORT_STAGE, finish: true });\r\n        case actionTypes.STAGE_ERROR:\r\n            return Object.assign({}, state, { current: STAGES.INVALID_STATE, error: action.error });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst common = (state = { current: null }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.USER_REGISTER:\r\n            return Object.assign({}, state, { current: action.user });\r\n        case actionTypes.USER_LOGOUT:\r\n            return Object.assign({}, state, { current: null });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst report = (state = { score: null, answers: [] }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SCORE_ADD:\r\n            return Object.assign({}, state, {\r\n                score: state.score + action.score,\r\n                answers: state.answers.concat(action.answer)\r\n            });\r\n        case actionTypes.SCORE_RESET:\r\n            return Object.assign({}, state, { score: null, answers: [] });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    stage, question, common, report\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/store'\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst persistState = {};\nconst store = configureStore(persistState)\n\n// Mock api calls\nconst axiosMock = new MockAdapter(axios, { delayResponse: 500 });\n\nconst questionsData = require('./questions.json');\n// console.log(questionsData)\n\naxiosMock.onGet('http://localhost:8000/questions').reply(200, questionsData);\n\naxiosMock.onPost('http://localhost:8000/register').reply(200, {\n  id: 1,\n  name: ''\n})\naxiosMock.onAny().passThrough();\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter /* basename=\"quiz-assignment\" */>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\n// import { persistState } from 'redux-devtools'\r\n// import { createStore, applyMiddleware } from 'redux'\r\n\r\nimport rootReducer from \"./reducers\"\r\n// export default createStore(\r\n//     reducers, {}, applyMiddleware(thunk)\r\n// );\r\n\r\nexport default function configureAppStore(preloadedState = {}) {\r\n    const store = configureStore({\r\n        reducer: rootReducer,\r\n        middleware: getDefaultMiddleware(),\r\n        preloadedState\r\n    })\r\n    // store.subscribe(throttle(() => {\r\n    //   saveState(store.getState());\r\n    // }, 1000));\r\n    // if (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    //     module.hot.accept('../reducers', () => store.replaceReducer(rootReducer))\r\n    // }\r\n    return store\r\n}"],"sourceRoot":""}